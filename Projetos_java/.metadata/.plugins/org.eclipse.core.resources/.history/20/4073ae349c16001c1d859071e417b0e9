package br.com.roverproblem;

import java.io.IOException;

import javax.swing.JOptionPane;

public class Pricipal {

	public static void main(String[] args) throws IOException {
	
			
		int maxInputs = 5;		
		
		System.out.println("Insert the size of plateau, two integer number, example 5 5");
		int plateuXY = System.in.read();
		System.out.println(plateuXY);
//
//		  
//	    public class Position : IPosition
//	    {
//	        public int X { get; set; }
//	        public int Y { get; set; }
//	        public Directions Direction { get; set; }
//
//	        public Position()
//	        {
//	            X = Y = 0;
//	            Direction = Directions.N;
//	        }
//
//	        private void Rotate90Left()
//	        {
//	            switch (this.Direction)
//	            {
//	                case Directions.N:
//	                    this.Direction = Directions.W;
//	                    break;
//	                case Directions.S:
//	                    this.Direction = Directions.E;
//	                    break;
//	                case Directions.E:
//	                    this.Direction = Directions.N;
//	                    break;
//	                case Directions.W:
//	                    this.Direction = Directions.S;
//	                    break;
//	                default:
//	                    break;
//	            }
//	        }
//
//	        private void Rotate90Right()
//	        {
//	            switch (this.Direction)
//	            {
//	                case Directions.N:
//	                    this.Direction = Directions.E;
//	                    break;
//	                case Directions.S:
//	                    this.Direction = Directions.W;
//	                    break;
//	                case Directions.E:
//	                    this.Direction = Directions.S;
//	                    break;
//	                case Directions.W:
//	                    this.Direction = Directions.N;
//	                    break;
//	                default:
//	                    break;
//	            }
//	        }
//
//	        private void MoveInSameDirection()
//	        {
//	            switch (this.Direction)
//	            {
//	                case Directions.N:
//	                    this.Y += 1;
//	                    break;
//	                case Directions.S:
//	                    this.Y -= 1;
//	                    break;
//	                case Directions.E:
//	                    this.X += 1;
//	                    break;
//	                case Directions.W:
//	                    this.X -= 1;
//	                    break;
//	                default:
//	                    break;
//	            }
//	        }
//
//	        public void StartMoving(List<int> maxPoints, string moves)
//	        {
//	            foreach (var move in moves)
//	            {
//	                switch (move)
//	                {
//	                    case 'M':
//	                        this.MoveInSameDirection();
//	                        break;
//	                    case 'L':
//	                        this.Rotate90Left();
//	                        break;
//	                    case 'R':
//	                        this.Rotate90Right();
//	                        break;
//	                    default:
//	                        Console.WriteLine($"Invalid Character {move}");
//	                        break;
//	                }
//
//	                if (this.X < 0 || this.X > maxPoints[0] || this.Y < 0 || this.Y > maxPoints[1])
//	                {
//	                    throw new Exception($"Oops! Position can not be beyond bounderies (0 , 0) and ({maxPoints[0]} , {maxPoints[1]})");
//	                }
//	            }
//	        }
//	    }
//		tamanhoMaxDoX=5
//				tamanhoMaxDoY=5
//				x=1
//				y=2
//				orientation=N
//
//				if(command == L){
//					switch orientation
//					case N:
//						orientation=W
//					case W:
//						orientation=S
//					case S:
//						orientation=E
//					case E:
//						orientation=N
//				}
//				else if(command == R){
//					switch orientation
//					case N:
//						orientation=E
//					case E:
//						orientation=S
//					case S:
//						orientation=W
//					case W:
//						orientation=N
//				}
//				else{
//					switch orietation
//					case N:
//						y++;
//					case W:
//						x--;
//					case S:
//						y--;
//					case E:
//						x++;
//				}
	}
}
